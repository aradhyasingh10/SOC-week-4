class Solution {
public:
    int f1(vector <int> &v, int idx, vector <int> &memo) {
        if (idx>=v.size()-1) return 0;
        if (memo[idx] != -1) return memo[idx];
        int left, right;
        left = f1(v, idx+2, memo) + v[idx];
        right = f1(v, idx+3, memo) +v[idx];
        return memo[idx] = max(left, right);
    }
    int f2(vector <int> &v, int idx, vector <int> &memo) {
        if (idx>=v.size()) return 0;
        if (memo[idx] != -1) return memo[idx];
        int left, right;
        left = f2(v, idx+2, memo) + v[idx];
        right = f2(v, idx+3, memo) +v[idx];
        return memo[idx] = max(left, right);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n==1) return nums[0];
        vector <int> memo1 (110, -1), memo2(110, -1), memo3(110, -1);
        int ans = f1(nums, 0, memo1);
        int ans2 = f2(nums, 1, memo2);
        int ans3 = f2(nums, 2, memo3);
        return max(max(ans, ans2), ans3);
    }
};
